master_process on;

worker_processes 2;
worker_cpu_affinity auto;

# user resty;

error_log logs/error.log info;
pid logs/nginx.pid;

worker_rlimit_nofile 20480;

events {
    accept_mutex off;
    worker_connections 10620;
}

worker_shutdown_timeout 1;

http {
    lua_package_path "$prefix/lua/?.lua;;";

    lua_ssl_verify_depth 5;
    ssl_session_timeout 86400;

    lua_socket_log_errors off;

    resolver ipv6=off local=on;
    resolver_timeout 5;

    lua_http10_buffering off;

    log_format main '$remote_addr - $remote_user [$time_local] $http_host "$request" $status $body_bytes_sent $request_time "$http_referer" "$http_user_agent" $upstream_addr $upstream_status $upstream_response_time';

    access_log logs/access.log main buffer=32768 flush=3;

    error_log logs/error.log info;

    open_file_cache  max=1000 inactive=60;
    client_max_body_size 0;

    server_tokens off;

    lua_shared_dict upstreams 10m;

    init_by_lua_block {
        gateway = require("gateway")
        upstream = require("core.upstream")
        log = require("comm.log")
        decode_json = require("cjson.safe").decode
        encode_json = require("cjson.safe").encode
        gateway.init()
    }

    init_worker_by_lua_block {
        gateway.init_worker()
    }

    upstream dynamic_host {
        server 0.0.0.0;
        balancer_by_lua_block {
            gateway.balancer_phase()
        }
    }

    server {
        listen 443 ssl;
        listen 9443 ssl http2;
        ssl_certificate      cert/upstream.crt;
        ssl_certificate_key  cert/upstream.key;
        ssl_session_cache    shared:SSL:1m;
        listen 80;
        listen 980 http2;

        include mime.types;

        location / {
            set $upstream_scheme             'http';
            set $upstream_host               $host;
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_uri                '';

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Server;
            proxy_pass_header  Date;
            proxy_pass         $upstream_scheme://dynamic_host$upstream_uri;
            grpc_pass          grpc://dynamic_host$upstream_uri;
        }

    }

    
    server {        
        listen 127.0.0.1:444 ssl;
        ssl_certificate      cert/upstream.crt;
        ssl_certificate_key  cert/upstream.key;
        ssl_session_cache    shared:SSL:1m;
        listen 127.0.0.1:81;
        server_name 127.0.0.1;
        include mime.types;

        # upstream admin api
        location = /upstreams {
            access_by_lua_block {
                local method = ngx.req.get_method()

                if method == "POST" then
                    ngx.req.read_body()
                    local data = ngx.req.get_body_data()
                    if not data then
                        log.error("get req body to fail")
                        ngx.exit(400)
                    end

                    local node_info = decode_json(data)
                    if not node_info then
                        log.error("decode fail")
                        ngx.exit(400)
                    end

                    upstream.set_node(node_info)
                    ngx.say("OK")
                end

                if method == "GET" then
                    local args = ngx.req.get_uri_args(20)
                    local scheme = args["scheme"]
                    local host = args["host"]
                    
                    if not scheme or not host then
                        log.error("invalid request, required scheme and host")
                        ngx.exit(400)
                    end

                    local nodes = upstream.get_node(scheme, host)
                    local body = encode_json(nodes)
                    ngx.say(body)
                end

                if method == "DELETE" then
                    local args = ngx.req.get_uri_args(20)
                    local scheme = args["scheme"]
                    local host = args["host"]
                    
                    if not scheme or not host then
                        log.error("invalid request, required scheme and host")
                        ngx.exit(400)
                    end

                    upstream.del_node(scheme, host)
                    ngx.say("OK")
                end
            }
        }
    }
}

stream {
    lua_package_path "$prefix/lua/?.lua;;";
    lua_shared_dict stream_upstream 5m;

    init_by_lua_block {
        gateway = require("stream_gateway")
        upstream = require("core.stream_upstream")
        log = require("comm.log")
        decode_json = require("cjson.safe").decode
        encode_json = require("cjson.safe").encode
        gateway.init()
    }
    
    init_worker_by_lua_block {
        gateway.init_worker()
    }

    server {
        listen 1234;
        
        content_by_lua_block {
            ngx.say("hello stream")
        }
    }
}